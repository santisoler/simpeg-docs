
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/examples/04-dcip/plot_read_DC_data_with_IO_class.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_content_examples_04-dcip_plot_read_DC_data_with_IO_class.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_examples_04-dcip_plot_read_DC_data_with_IO_class.py:


Reading and Plotting data with DC.IO class
==========================================

The DC.IO class is a convenient way to handle DC data and
carry inversions within a same class. It also has several plotting utils
such as pseudosections. We show here an example of plotting DC data based
on a demonstration dataset.

.. GENERATED FROM PYTHON SOURCE LINES 10-20

.. code-block:: Python


    import numpy as np
    import pandas as pd
    import shutil
    import os
    import matplotlib.pyplot as plt
    from SimPEG.electromagnetics.static import resistivity as DC
    from SimPEG import Report
    from SimPEG.utils.io_utils import download


.. GENERATED FROM PYTHON SOURCE LINES 21-24

Download an example DC data csv file
------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 24-36

.. code-block:: Python


    # file origina and name
    url = "https://storage.googleapis.com/simpeg/examples/dc_data.csv"
    fname = download(url, folder="./test_url", overwrite=True)

    # read csv using pandas
    df = pd.read_csv(fname)
    # header for ABMN locations
    header_loc = ["Spa." + str(i + 1) for i in range(4)]
    # Apparent resistivity
    header_apprho = df.keys()[6]


.. GENERATED FROM PYTHON SOURCE LINES 37-40

Convert file to DC.IO object
----------------------------


.. GENERATED FROM PYTHON SOURCE LINES 41-65

.. code-block:: Python


    # Number of the data
    ndata = df[header_loc[0]].values.size
    # ABMN locations
    a = np.c_[df[header_loc[0]].values, np.zeros(ndata)]
    b = np.c_[df[header_loc[1]].values, np.zeros(ndata)]
    m = np.c_[df[header_loc[2]].values, np.zeros(ndata)]
    n = np.c_[df[header_loc[3]].values, np.zeros(ndata)]
    # Apparent resistivity
    apprho = df[header_apprho].values

    # Create DC.IO survey Object object
    IO = DC.IO()
    # Generate DC survey using IO object
    dc_survey = IO.from_abmn_locations_to_survey(
        a,
        b,
        m,
        n,
        survey_type="dipole-dipole",
        data_dc=apprho,
        data_dc_type="apparent_resistivity",
    )


.. GENERATED FROM PYTHON SOURCE LINES 66-69

Plot
----


.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: Python

    fig, ax = plt.subplots(1, 1, figsize=(10, 3))
    IO.plotPseudoSection(
        data_type="apparent_resistivity", scale="linear", clim=(0, 1000), ncontour=3, ax=ax
    )
    plt.show()

    # clean up
    shutil.rmtree(os.path.expanduser("./test_url"))


.. GENERATED FROM PYTHON SOURCE LINES 80-83

Print the version of SimPEG and dependencies
--------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 83-86

.. code-block:: Python


    Report()


.. GENERATED FROM PYTHON SOURCE LINES 87-97

Moving Forward
--------------

If you have suggestions for improving this example, please create a `pull request on the example in SimPEG <https://github.com/simpeg/simpeg/blob/main/examples/06-dc/read_plot_DC_data_with_IO_class.py>`_

You might try:
   - changing the contour levels
   - try with you own dataset
   - create a mask for negative apparent resistivities
   - ...

**Estimated memory usage:**  0 MB


.. _sphx_glr_download_content_examples_04-dcip_plot_read_DC_data_with_IO_class.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_read_DC_data_with_IO_class.ipynb <plot_read_DC_data_with_IO_class.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_read_DC_data_with_IO_class.py <plot_read_DC_data_with_IO_class.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
