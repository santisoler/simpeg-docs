.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_content_examples_06-tdem_plot_inv_tdem_1D_raw_waveform.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_content_examples_06-tdem_plot_inv_tdem_1D_raw_waveform.py:


EM: TDEM: 1D: Inversion with VTEM waveform
==========================================

Here we will create and run a TDEM 1D inversion,
with VTEM waveform of which initial condition
is zero, but have some on- and off-time.



.. image:: /content/examples/06-tdem/images/sphx_glr_plot_inv_tdem_1D_raw_waveform_001.png
    :alt: plot inv tdem 1D raw waveform
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:95: FutureWarning: CylMesh has been deprecated, please use CylindricalMesh. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: CylMesh.vectorCCz has been deprecated, please use CylMesh.cell_centers_z. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/base/base_mesh.py:1083: FutureWarning: nCz has been deprecated, please access as mesh.shape_cells[2]
      FutureWarning,
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:176: FutureWarning: meshTensor has been deprecated, please use unpack_widths. It will be removed in version 1.0.0 of discretize.
      FutureWarning,
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: TensorMesh.vectorNx has been deprecated, please use TensorMesh.nodes_x. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:157: FutureWarning: CylMesh.getEdgeInnerProduct has been deprecated, please use CylMesh.get_edge_inner_product. It will be removed in version 1.0.0 of discretize.
      FutureWarning,
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/operators/inner_products.py:122: FutureWarning: The invMat keyword argument has been deprecated, please use invert_matrix. This will be removed in discretize 1.0.0
      FutureWarning,
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: CylMesh.edgeCurl has been deprecated, please use CylMesh.edge_curl. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:157: FutureWarning: CylMesh.getFaceInnerProduct has been deprecated, please use CylMesh.get_face_inner_product. It will be removed in version 1.0.0 of discretize.
      FutureWarning,
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: CylMesh.isSymmetric has been deprecated, please use CylMesh.is_symmetric. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:157: FutureWarning: CylMesh.getInterpolationMat has been deprecated, please use CylMesh.get_interpolation_matrix. It will be removed in version 1.0.0 of discretize.
      FutureWarning,
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:157: FutureWarning: TensorMesh.getInterpolationMat has been deprecated, please use TensorMesh.get_interpolation_matrix. It will be removed in version 1.0.0 of discretize.
      FutureWarning,
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/base/base_tensor_mesh.py:724: FutureWarning: hz has been deprecated, please access as mesh.h[2]
      "hz has been deprecated, please access as mesh.h[2]", FutureWarning
    SimPEG.InvProblem will set Regularization.mref to m0.

            SimPEG.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.
            ***Done using same Solver and solverOpts as the problem***
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: TensorMesh._cellGradxStencil has been deprecated, please use TensorMesh.stencil_cell_gradient_x. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: TensorMesh.vol has been deprecated, please use TensorMesh.cell_volumes. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    model has any nan: 0
    ============================ Inexact Gauss Newton ============================
      #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   
    -----------------------------------------------------------------------------
    x0 has any nan: 0
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:157: FutureWarning: CylMesh.getEdgeInnerProductDeriv has been deprecated, please use CylMesh.get_edge_inner_product_deriv. It will be removed in version 1.0.0 of discretize.
      FutureWarning,
       0  1.00e+02  1.49e+04  0.00e+00  1.49e+04    1.43e+03      0              
       1  1.00e+02  2.04e+03  3.14e+01  5.18e+03    4.67e+03      0              
       2  1.00e+02  1.69e+02  2.38e+01  2.55e+03    1.38e+03      0              
       3  1.00e+02  4.57e+01  2.04e+01  2.08e+03    3.81e+02      0   Skip BFGS  
       4  1.00e+02  5.69e+01  1.95e+01  2.01e+03    1.69e+02      0   Skip BFGS  
       5  1.00e+02  6.22e+01  1.92e+01  1.98e+03    8.59e+01      0   Skip BFGS  
    ------------------------- STOP! -------------------------
    1 : |fc-fOld| = 2.2346e+01 <= tolF*(1+|f0|) = 1.4858e+03
    1 : |xc-x_last| = 4.1072e-01 <= tolX*(1+|x0|) = 3.6894e+00
    0 : |proj(x-g)-x|    = 8.5858e+01 <= tolG          = 1.0000e-01
    0 : |proj(x-g)-x|    = 8.5858e+01 <= 1e3*eps       = 1.0000e-02
    1 : maxIter   =       5    <= iter          =      5
    ------------------------- DONE! -------------------------
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: CylMesh.vectorCCz has been deprecated, please use CylMesh.cell_centers_z. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)
    /usr/share/miniconda/envs/deploy/lib/python3.7/site-packages/discretize/utils/code_utils.py:129: FutureWarning: CylMesh.vectorCCz has been deprecated, please use CylMesh.cell_centers_z. It will be removed in version 1.0.0 of discretize.
      warnings.warn(message, FutureWarning)






|


.. code-block:: default

    import numpy as np
    import discretize
    from SimPEG import (
        maps,
        data_misfit,
        regularization,
        optimization,
        inverse_problem,
        inversion,
        directives,
        utils,
    )
    from SimPEG.electromagnetics import time_domain as TDEM, utils as EMutils
    import matplotlib.pyplot as plt
    from scipy.interpolate import interp1d

    try:
        from pymatsolver import Pardiso as Solver
    except ImportError:
        from SimPEG import SolverLU as Solver


    def run(plotIt=True):

        cs, ncx, ncz, npad = 5.0, 25, 24, 15
        hx = [(cs, ncx), (cs, npad, 1.3)]
        hz = [(cs, npad, -1.3), (cs, ncz), (cs, npad, 1.3)]
        mesh = discretize.CylMesh([hx, 1, hz], "00C")

        active = mesh.vectorCCz < 0.0
        layer = (mesh.vectorCCz < -50.0) & (mesh.vectorCCz >= -150.0)
        actMap = maps.InjectActiveCells(mesh, active, np.log(1e-8), nC=mesh.nCz)
        mapping = maps.ExpMap(mesh) * maps.SurjectVertical1D(mesh) * actMap
        sig_half = 1e-3
        sig_air = 1e-8
        sig_layer = 1e-2
        sigma = np.ones(mesh.nCz) * sig_air
        sigma[active] = sig_half
        sigma[layer] = sig_layer
        mtrue = np.log(sigma[active])

        x = np.r_[30, 50, 70, 90]
        rxloc = np.c_[x, x * 0.0, np.zeros_like(x)]

        prb = TDEM.Simulation3DMagneticFluxDensity(mesh, sigmaMap=mapping, solver=Solver)
        prb.time_steps = [
            (1e-3, 5),
            (1e-4, 5),
            (5e-5, 10),
            (5e-5, 5),
            (1e-4, 10),
            (5e-4, 10),
        ]
        # Use VTEM waveform
        out = EMutils.VTEMFun(prb.times, 0.00595, 0.006, 100)

        # Forming function handle for waveform using 1D linear interpolation
        wavefun = interp1d(prb.times, out)
        t0 = 0.006
        waveform = TDEM.Src.RawWaveform(offTime=t0, waveFct=wavefun)

        rx = TDEM.Rx.PointMagneticFluxTimeDerivative(
            rxloc, np.logspace(-4, -2.5, 11) + t0, "z"
        )
        src = TDEM.Src.CircularLoop(
            [rx], waveform=waveform, loc=np.array([0.0, 0.0, 0.0]), radius=10.0
        )
        survey = TDEM.Survey([src])
        prb.survey = survey

        # create observed data
        data = prb.make_synthetic_data(mtrue, relative_error=0.02, noise_floor=1e-11)

        dmisfit = data_misfit.L2DataMisfit(simulation=prb, data=data)
        regMesh = discretize.TensorMesh([mesh.hz[mapping.maps[-1].indActive]])
        reg = regularization.Simple(regMesh)
        opt = optimization.InexactGaussNewton(maxIter=5, LSshorten=0.5)
        invProb = inverse_problem.BaseInvProblem(dmisfit, reg, opt)
        target = directives.TargetMisfit()
        # Create an inversion object
        beta = directives.BetaSchedule(coolingFactor=1.0, coolingRate=2.0)
        betaest = directives.BetaEstimate_ByEig(beta0_ratio=1e0)
        invProb.beta = 1e2
        inv = inversion.BaseInversion(invProb, directiveList=[beta, target])
        m0 = np.log(np.ones(mtrue.size) * sig_half)
        prb.counter = opt.counter = utils.Counter()
        opt.remember("xc")
        mopt = inv.run(m0)

        if plotIt:
            fig, ax = plt.subplots(1, 2, figsize=(10, 6))
            Dobs = data.dobs.reshape((len(rx.times), len(x)))
            Dpred = invProb.dpred.reshape((len(rx.times), len(x)))
            for i in range(len(x)):
                ax[0].loglog(rx.times - t0, -Dobs[:, i].flatten(), "k")
                ax[0].loglog(rx.times - t0, -Dpred[:, i].flatten(), "k.")
                if i == 0:
                    ax[0].legend(("$d^{obs}$", "$d^{pred}$"), fontsize=16)
            ax[0].set_xlabel("Time (s)", fontsize=14)
            ax[0].set_ylabel("$db_z / dt$ (nT/s)", fontsize=16)
            ax[0].set_xlabel("Time (s)", fontsize=14)
            ax[0].grid(color="k", alpha=0.5, linestyle="dashed", linewidth=0.5)

            plt.semilogx(sigma[active], mesh.vectorCCz[active])
            plt.semilogx(np.exp(mopt), mesh.vectorCCz[active])
            ax[1].set_ylim(-600, 0)
            ax[1].set_xlim(1e-4, 1e-1)
            ax[1].set_xlabel("Conductivity (S/m)", fontsize=14)
            ax[1].set_ylabel("Depth (m)", fontsize=14)
            ax[1].grid(color="k", alpha=0.5, linestyle="dashed", linewidth=0.5)
            plt.legend(["$\sigma_{true}$", "$\sigma_{pred}$"])


    if __name__ == "__main__":
        run()
        plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  42.373 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_content_examples_06-tdem_plot_inv_tdem_1D_raw_waveform.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_inv_tdem_1D_raw_waveform.py <plot_inv_tdem_1D_raw_waveform.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_inv_tdem_1D_raw_waveform.ipynb <plot_inv_tdem_1D_raw_waveform.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
