
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/examples/06-tdem/plot_fwd_tdem_inductive_src_permeable_target.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_content_examples_06-tdem_plot_fwd_tdem_inductive_src_permeable_target.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_examples_06-tdem_plot_fwd_tdem_inductive_src_permeable_target.py:


EM: TDEM: Permeable Target, Inductive Source
============================================

In this example, we demonstrate 2 approaches for simulating TDEM data when
a permeable target is present in the simulation domain. In the first, we
use a step-on waveform (QuarterSineRampOnWaveform) and look at the magnetic
flux at a late on-time. In the second, we solve the magnetostatic problem
to compute the initial magnetic flux so that a step-off waveform may be used.

A cylindrically symmetric mesh is employed and a circular loop source is used

.. GENERATED FROM PYTHON SOURCE LINES 13-29

.. code-block:: default


    import discretize
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm
    from scipy.constants import mu_0

    try:
        from pymatsolver import Pardiso as Solver
    except ImportError:
        from SimPEG import SolverLU as Solver
    import time

    from SimPEG.electromagnetics import time_domain as TDEM
    from SimPEG import utils, maps, Report








.. GENERATED FROM PYTHON SOURCE LINES 30-35

Model Parameters
----------------

Here, we define our simulation parameters. The target has a relative
permeability of 100 :math:`\mu_0`

.. GENERATED FROM PYTHON SOURCE LINES 35-45

.. code-block:: default


    target_mur = 100  # permeability of the target
    target_l = 500  # length of target
    target_r = 50  # radius of the target

    sigma_back = 1e-5  # conductivity of the background

    radius_loop = 100  # radius of the transmitter loop









.. GENERATED FROM PYTHON SOURCE LINES 46-50

Mesh
----

Next, we create a cylindrically symmteric tensor mesh

.. GENERATED FROM PYTHON SOURCE LINES 50-78

.. code-block:: default


    csx = 5.0  # core cell size in the x-direction
    csz = 5.0  # core cell size in the z-direction
    domainx = 100  # use a uniform cell size out to a radius of 100m

    # padding parameters
    npadx, npadz = 15, 15  # number of padding cells
    pfx = 1.4  # expansion factor for the padding to infinity in the x-direction
    pfz = 1.4  # expansion factor for the padding to infinity in the z-direction

    ncz = int(target_l / csz)  # number of z cells in the core region

    # create the cyl mesh
    mesh = discretize.CylMesh(
        [
            [(csx, int(domainx / csx)), (csx, npadx, pfx)],
            1,
            [(csz, npadz, -pfz), (csz, ncz), (csz, npadz, pfz)],
        ]
    )

    # put the origin at the top of the target
    mesh.x0 = [0, 0, -mesh.hz[: npadz + ncz].sum()]

    # plot the mesh
    mesh.plotGrid()





.. image:: /content/examples/06-tdem/images/sphx_glr_plot_fwd_tdem_inductive_src_permeable_target_001.png
    :alt: plot fwd tdem inductive src permeable target
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:xlabel='x', ylabel='z'>



.. GENERATED FROM PYTHON SOURCE LINES 79-80

Assign physical properties on the mesh

.. GENERATED FROM PYTHON SOURCE LINES 80-92

.. code-block:: default


    mur_model = np.ones(mesh.nC)

    # find the indices of the target
    x_inds = mesh.gridCC[:, 0] < target_r
    z_inds = (mesh.gridCC[:, 2] <= 0) & (mesh.gridCC[:, 2] >= -target_l)

    mur_model[x_inds & z_inds] = target_mur
    mu_model = mu_0 * mur_model

    sigma = np.ones(mesh.nC) * sigma_back








.. GENERATED FROM PYTHON SOURCE LINES 93-94

Plot the models

.. GENERATED FROM PYTHON SOURCE LINES 94-117

.. code-block:: default


    xlim = np.r_[-200, 200]  # x-limits in meters
    zlim = np.r_[-1.5 * target_l, 10.0]  # z-limits in meters. (z-positive up)

    fig, ax = plt.subplots(1, 1, figsize=(6, 5))

    # plot the permeability
    plt.colorbar(
        mesh.plotImage(
            mur_model,
            ax=ax,
            pcolorOpts={"norm": LogNorm()},  # plot on a log-scale
            mirror=True,
        )[0],
        ax=ax,
    )
    ax.plot(np.r_[radius_loop], np.r_[0.0], "wo", markersize=8)
    ax.plot(np.r_[-radius_loop], np.r_[0.0], "wx", markersize=8)

    ax.set_title("Relative permeability", fontsize=13)
    ax.set_xlim(xlim)
    ax.set_ylim(zlim)




.. image:: /content/examples/06-tdem/images/sphx_glr_plot_fwd_tdem_inductive_src_permeable_target_002.png
    :alt: Relative permeability
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (-750.0, 10.0)



.. GENERATED FROM PYTHON SOURCE LINES 118-124

Waveform for the Long On-Time Simulation
----------------------------------------

Here, we define our time-steps for the simulation where we will use a
waveform with a long on-time to reach a steady-state magnetic field and
define a quarter-sine ramp-on waveform as our transmitter waveform

.. GENERATED FROM PYTHON SOURCE LINES 124-153

.. code-block:: default


    ramp = [
        (1e-5, 20),
        (1e-4, 20),
        (3e-4, 20),
        (1e-3, 20),
        (3e-3, 20),
        (1e-2, 20),
        (3e-2, 20),
        (1e-1, 20),
        (3e-1, 20),
        (1, 50),
    ]
    time_mesh = discretize.TensorMesh([ramp])

    # define an off time past when we will simulate to keep the transmitter on
    offTime = 100
    quarter_sine = TDEM.Src.QuarterSineRampOnWaveform(
        ramp_on=np.r_[0.0, 3], ramp_off=offTime - np.r_[1.0, 0]
    )

    # evaluate the waveform at each time in the simulation
    quarter_sine_plt = [quarter_sine.eval(t) for t in time_mesh.gridN]

    fig, ax = plt.subplots(1, 1, figsize=(6, 4))
    ax.plot(time_mesh.gridN, quarter_sine_plt)
    ax.plot(time_mesh.gridN, np.zeros(time_mesh.nN), "k|", markersize=2)
    ax.set_title("quarter sine waveform")




.. image:: /content/examples/06-tdem/images/sphx_glr_plot_fwd_tdem_inductive_src_permeable_target_003.png
    :alt: quarter sine waveform
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'quarter sine waveform')



.. GENERATED FROM PYTHON SOURCE LINES 154-159

Sources for the 2 simulations
-----------------------------

We use two sources, one for the magnetostatic simulation and one for the
ramp on simulation.

.. GENERATED FROM PYTHON SOURCE LINES 159-173

.. code-block:: default


    # For the magnetostatic simulation. The default waveform is a step-off
    src_magnetostatic = TDEM.Src.CircularLoop(
        [], loc=np.r_[0.0, 0.0, 0.0], orientation="z", radius=100,
    )

    # For the long on-time simulation. We use the ramp-on waveform
    src_ramp_on = TDEM.Src.CircularLoop(
        [], loc=np.r_[0.0, 0.0, 0.0], orientation="z", radius=100, waveform=quarter_sine
    )

    src_list_magnetostatic = [src_magnetostatic]
    src_list_ramp_on = [src_ramp_on]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:413: FutureWarning:

    loc has been deprecated, please use location. It will be removed in version 0.16.0 of SimPEG.

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:420: FutureWarning:

    loc has been deprecated, please use location. It will be removed in version 0.16.0 of SimPEG.





.. GENERATED FROM PYTHON SOURCE LINES 174-179

Create the simulations
----------------------

To simulate magnetic flux data, we use the b-formulation of Maxwell's
equations

.. GENERATED FROM PYTHON SOURCE LINES 179-193

.. code-block:: default


    prob_magnetostatic = TDEM.Simulation3DMagneticFluxDensity(
        mesh=mesh, sigmaMap=maps.IdentityMap(mesh), timeSteps=ramp, Solver=Solver
    )
    prob_ramp_on = TDEM.Simulation3DMagneticFluxDensity(
        mesh=mesh, sigmaMap=maps.IdentityMap(mesh), timeSteps=ramp, Solver=Solver
    )

    survey_magnetostatic = TDEM.Survey(srcList=src_list_magnetostatic)
    survey_ramp_on = TDEM.Survey(src_list_ramp_on)

    prob_magnetostatic.pair(survey_magnetostatic)
    prob_ramp_on.pair(survey_ramp_on)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:413: FutureWarning:

    timeSteps has been deprecated, please use time_steps. It will be removed in version 0.16.0 of SimPEG.

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:420: FutureWarning:

    timeSteps has been deprecated, please use time_steps. It will be removed in version 0.16.0 of SimPEG.

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:413: FutureWarning:

    Solver has been deprecated, please use simulation.solver. It will be removed in version 0.16.0 of SimPEG.

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:420: FutureWarning:

    Solver has been deprecated, please use simulation.solver. It will be removed in version 0.16.0 of SimPEG.

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:413: FutureWarning:

    srcList has been deprecated, please use source_list. It will be removed in version 0.16.0 of SimPEG.

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:420: FutureWarning:

    srcList has been deprecated, please use source_list. It will be removed in version 0.16.0 of SimPEG.

    /home/vsts/work/1/s/SimPEG/simulation.py:400: FutureWarning:

    Simulation.pair(survey) will be deprecated. Please update your code to instead use simulation.survey = survey, or pass it upon intialization of the simulation object. This will be removed in version 0.16.0 of SimPEG

    /home/vsts/work/1/s/SimPEG/survey.py:337: FutureWarning:

    survey.pair(simulation) will be deprecated. Please update your code to instead use simulation.survey = survey, or pass it upon intialization of the simulation object. This will be removed in version 0.16.0 of SimPEG





.. GENERATED FROM PYTHON SOURCE LINES 194-196

Run the long on-time simulation
-------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 196-209

.. code-block:: default


    t = time.time()
    print("--- Running Long On-Time Simulation ---")

    prob_ramp_on.mu = mu_model
    fields = prob_ramp_on.fields(sigma)

    print(" ... done. Elapsed time {}".format(time.time() - t))
    print("\n")

    # grab the last time-step in the simulation
    b_ramp_on = utils.mkvc(fields[:, "b", -1])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    --- Running Long On-Time Simulation ---
    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:413: FutureWarning:

    loc has been deprecated, please use location. It will be removed in version 0.16.0 of SimPEG.

     ... done. Elapsed time 2.0539021492004395






.. GENERATED FROM PYTHON SOURCE LINES 210-212

Compute Magnetostatic Fields from the step-off source
-----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 212-218

.. code-block:: default


    prob_magnetostatic.mu = mu_model
    prob_magnetostatic.model = sigma
    b_magnetostatic = src_magnetostatic.bInitial(prob_magnetostatic)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/vsts/work/1/s/SimPEG/utils/code_utils.py:413: FutureWarning:

    loc has been deprecated, please use location. It will be removed in version 0.16.0 of SimPEG.





.. GENERATED FROM PYTHON SOURCE LINES 219-221

Plot the results
-----------------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 221-283

.. code-block:: default



    def plotBFieldResults(
        ax=None,
        clim_min=None,
        clim_max=None,
        max_depth=1.5 * target_l,
        max_r=100,
        top=10.0,
        view="magnetostatic",
    ):
        if ax is None:
            plt.subplots(1, 1, figsize=(6, 7))

        assert view.lower() in ["magnetostatic", "late_ontime", "diff"]

        xlim = max_r * np.r_[-1, 1]  # x-limits in meters
        zlim = np.r_[-max_depth, top]  # z-limits in meters. (z-positive up)

        clim = None

        if clim_max is not None and clim_max != 0.0:
            clim = clim_max * np.r_[-1, 1]

            if clim_min is not None and clim_min != 0.0:
                clim[0] = clim_min

        if view == "magnetostatic":
            plotme = b_magnetostatic
        elif view == "late_ontime":
            plotme = b_ramp_on
        elif view == "diff":
            plotme = b_magnetostatic - b_ramp_on

        cb = plt.colorbar(
            mesh.plotImage(
                plotme,
                view="vec",
                v_type="F",
                ax=ax,
                range_x=xlim,
                range_y=zlim,
                sample_grid=np.r_[np.diff(xlim) / 100.0, np.diff(zlim) / 100.0],
                mirror=True,
                pcolor_opts={"norm": LogNorm()},
            )[0],
            ax=ax,
        )
        ax.set_title("{}".format(view), fontsize=13)
        ax.set_xlim(xlim)
        ax.set_ylim(zlim)
        cb.update_ticks()

        return ax


    fig, ax = plt.subplots(1, 3, figsize=(12, 5))

    for a, v in zip(ax, ["magnetostatic", "late_ontime", "diff"]):
        a = plotBFieldResults(ax=a, clim_min=1e-15, clim_max=1e-7, view=v, max_r=200)
    plt.tight_layout()




.. image:: /content/examples/06-tdem/images/sphx_glr_plot_fwd_tdem_inductive_src_permeable_target_004.png
    :alt: magnetostatic, late_ontime, diff
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 284-287

Print the version of SimPEG and dependencies
--------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 287-290

.. code-block:: default

    plt.show()

    Report()





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <table style='border: 3px solid #ddd;'>
      <tr>
         <td style='text-align: center; font-weight: bold; font-size: 1.2em; border: 2px solid #fff;' colspan='6'>Sat Aug 28 02:38:39 2021 UTC</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>OS</td>
        <td style='text-align: left; border: 2px solid #fff;'>Linux</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>CPU(s)</td>
        <td style='text-align: left; border: 2px solid #fff;'>2</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Machine</td>
        <td style='text-align: left; border: 2px solid #fff;'>x86_64</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Architecture</td>
        <td style='text-align: left; border: 2px solid #fff;'>64bit</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>RAM</td>
        <td style='text-align: left; border: 2px solid #fff;'>6.8 GiB</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>Environment</td>
        <td style='text-align: left; border: 2px solid #fff;'>Python</td>
      </tr>
      <tr>
         <td style='text-align: center; border: 2px solid #fff;' colspan='6'>Python 3.7.11 (default, Jul 27 2021, 14:32:16) 
    [GCC 7.5.0]</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>SimPEG</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.15.1</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>discretize</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.7.0</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>pymatsolver</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.1.3</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>vectormath</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.2.2</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>properties</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.6.1</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>numpy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.20.3</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>scipy</td>
        <td style='text-align: left; border: 2px solid #fff;'>1.6.2</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>cython</td>
        <td style='text-align: left; border: 2px solid #fff;'>0.29.24</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>IPython</td>
        <td style='text-align: left; border: 2px solid #fff;'>7.26.0</td>
      </tr>
      <tr>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>matplotlib</td>
        <td style='text-align: left; border: 2px solid #fff;'>3.4.2</td>
        <td style='text-align: right; background-color: #ccc; border: 2px solid #fff;'>ipywidgets</td>
        <td style='text-align: left; border: 2px solid #fff;'>7.6.3</td>
        <td style= border: 2px solid #fff;'></td>
        <td style= border: 2px solid #fff;'></td>
      </tr>
      <tr>
         <td style='text-align: center; background-color: #ddd;border: 2px solid #fff;' colspan='6'>Intel(R) oneAPI Math Kernel Library Version 2021.3-Product Build 20210617 for Intel(R) 64 architecture applications</td>
      </tr>
    </table>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.812 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_content_examples_06-tdem_plot_fwd_tdem_inductive_src_permeable_target.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_fwd_tdem_inductive_src_permeable_target.py <plot_fwd_tdem_inductive_src_permeable_target.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_fwd_tdem_inductive_src_permeable_target.ipynb <plot_fwd_tdem_inductive_src_permeable_target.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
