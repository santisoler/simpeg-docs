.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_2_inversion_irls.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_content_tutorials_02-linear_inversion_plot_inv_2_inversion_irls.py:


Sparse Inversion with Iteratively Re-Weighted Least-Squares
===========================================================

Least-squares inversion produces smooth models which may not be an accurate
representation of the true model. Here we demonstrate the basics of inverting 
for sparse and/or blocky models. Here, we used the iteratively reweighted
least-squares approach. For this tutorial, we focus on the following:

    - Defining the forward problem
    - Defining the inverse problem (data misfit, regularization, optimization)
    - Defining the paramters for the IRLS algorithm
    - Specifying directives for the inversion
    - Recovering a set of model parameters which explains the observations


.. code-block:: default


    from __future__ import print_function

    import numpy as np
    import matplotlib.pyplot as plt

    from discretize import TensorMesh

    from SimPEG.simulation import LinearSimulation
    from SimPEG.data import Data
    from SimPEG import (
        simulation,
        maps,
        data_misfit,
        directives,
        optimization,
        regularization,
        inverse_problem,
        inversion,
    )

    # sphinx_gallery_thumbnail_number = 3








Defining the Model and Mapping
------------------------------

Here we generate a synthetic model and a mappig which goes from the model
space to the row space of our linear operator.



.. code-block:: default


    nParam = 100  # Number of model paramters

    # A 1D mesh is used to define the row-space of the linear operator.
    mesh = TensorMesh([nParam])

    # Creating the true model
    true_model = np.zeros(mesh.nC)
    true_model[mesh.vectorCCx > 0.3] = 1.0
    true_model[mesh.vectorCCx > 0.45] = -0.5
    true_model[mesh.vectorCCx > 0.6] = 0

    # Mapping from the model space to the row space of the linear operator
    model_map = maps.IdentityMap(mesh)

    # Plotting the true model
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    ax.plot(mesh.vectorCCx, true_model, "b-")
    ax.set_ylim([-2, 2])




.. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_001.png
    :alt: plot inv 2 inversion irls
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (-2.0, 2.0)



Defining the Linear Operator
----------------------------

Here we define the linear operator with dimensions (nData, nParam). In practive,
you may have a problem-specific linear operator which you would like to construct
or load here.



.. code-block:: default


    # Number of data observations (rows)
    nData = 20

    # Create the linear operator for the tutorial. The columns of the linear operator
    # represents a set of decaying and oscillating functions.
    jk = np.linspace(1.0, 60.0, nData)
    p = -0.25
    q = 0.25


    def g(k):
        return np.exp(p * jk[k] * mesh.vectorCCx) * np.cos(
            np.pi * q * jk[k] * mesh.vectorCCx
        )


    G = np.empty((nData, nParam))

    for i in range(nData):
        G[i, :] = g(i)

    # Plot the columns of G
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    for i in range(G.shape[0]):
        ax.plot(G[i, :])

    ax.set_title("Columns of matrix G")





.. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_002.png
    :alt: Columns of matrix G
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Columns of matrix G')



Defining the Simulation
-----------------------

The simulation defines the relationship between the model parameters and
predicted data.



.. code-block:: default


    sim = simulation.LinearSimulation(mesh, G=G, model_map=model_map)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /Users/josephcapriotti/opt/anaconda3/envs/simulation/lib/python3.8/site-packages/SimPEG/simulation.py:547: UserWarning:

    G has not been implemented for the simulation





Predict Synthetic Data
----------------------

Here, we use the true model to create synthetic data which we will subsequently
invert.



.. code-block:: default


    # Standard deviation of Gaussian noise being added
    std = 0.02
    np.random.seed(1)

    # Create a SimPEG data object
    data_obj = sim.make_synthetic_data(true_model, noise_floor=std, add_noise=True)








Define the Inverse Problem
--------------------------

The inverse problem is defined by 3 things:

    1) Data Misfit: a measure of how well our recovered model explains the field data
    2) Regularization: constraints placed on the recovered model and a priori information
    3) Optimization: the numerical approach used to solve the inverse problem



.. code-block:: default


    # Define the data misfit. Here the data misfit is the L2 norm of the weighted
    # residual between the observed data and the data predicted for a given model.
    # Within the data misfit, the residual between predicted and observed data are
    # normalized by the data's standard deviation.
    dmis = data_misfit.L2DataMisfit(simulation=sim, data=data_obj)

    # Define the regularization (model objective function). Here, 'p' defines the
    # the norm of the smallness term and 'q' defines the norm of the smoothness
    # term.
    reg = regularization.Sparse(mesh, mapping=model_map)
    reg.mref = np.zeros(nParam)
    p = 0.0
    q = 0.0
    reg.norms = np.c_[p, q]

    # Define how the optimization problem is solved.
    opt = optimization.ProjectedGNCG(
        maxIter=100, lower=-2.0, upper=2.0, maxIterLS=20, maxIterCG=30, tolCG=1e-4
    )

    # Here we define the inverse problem that is to be solved
    inv_prob = inverse_problem.BaseInvProblem(dmis, reg, opt)








Define Inversion Directives
---------------------------

Here we define any directiveas that are carried out during the inversion. This
includes the cooling schedule for the trade-off parameter (beta), stopping
criteria for the inversion and saving inversion results at each iteration.



.. code-block:: default


    # Add sensitivity weights but don't update at each beta
    sensitivity_weights = directives.UpdateSensitivityWeights(everyIter=False)

    # Reach target misfit for L2 solution, then use IRLS until model stops changing.
    IRLS = directives.Update_IRLS(max_irls_iterations=40, minGNiter=1, f_min_change=1e-4)

    # Defining a starting value for the trade-off parameter (beta) between the data
    # misfit and the regularization.
    starting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1e0)

    # Update the preconditionner
    update_Jacobi = directives.UpdatePreconditioner()

    # Save output at each iteration
    saveDict = directives.SaveOutputEveryIteration(save_txt=False)

    # Define the directives as a list
    directives_list = [sensitivity_weights, IRLS, starting_beta, update_Jacobi, saveDict]









Setting a Starting Model and Running the Inversion
--------------------------------------------------

To define the inversion object, we need to define the inversion problem and
the set of directives. We can then run the inversion.



.. code-block:: default


    # Here we combine the inverse problem and the set of directives
    inv = inversion.BaseInversion(inv_prob, directives_list)

    # Starting model
    starting_model = 1e-4 * np.ones(nParam)

    # Run inversion
    recovered_model = inv.run(starting_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


            SimPEG.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.
            ***Done using same Solver and solverOpts as the problem***
    model has any nan: 0
    =============================== Projected GNCG ===============================
      #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   
    -----------------------------------------------------------------------------
    x0 has any nan: 0
       0  1.28e+04  1.33e+03  4.75e-08  1.33e+03    1.98e+01      0              
       1  6.38e+03  6.66e+02  1.88e-02  7.86e+02    1.80e+01      0              
       2  3.19e+03  4.51e+02  4.30e-02  5.89e+02    1.67e+01      0   Skip BFGS  
       3  1.60e+03  2.64e+02  8.47e-02  3.99e+02    1.50e+01      0   Skip BFGS  
       4  7.98e+02  1.34e+02  1.42e-01  2.47e+02    1.36e+01      0   Skip BFGS  
       5  3.99e+02  5.99e+01  2.06e-01  1.42e+02    1.13e+01      0   Skip BFGS  
       6  1.99e+02  2.60e+01  2.64e-01  7.88e+01    9.02e+00      0   Skip BFGS  
       7  9.97e+01  1.29e+01  3.09e-01  4.38e+01    7.55e+00      0   Skip BFGS  
    Reached starting chifact with l2-norm regularization: Start IRLS steps...
    eps_p: 1.2790845648737665 eps_q: 1.2790845648737665
       8  4.99e+01  8.43e+00  4.64e-01  3.16e+01    2.91e+00      0   Skip BFGS  
       9  8.15e+01  7.89e+00  5.32e-01  5.12e+01    1.23e+01      0              
      10  8.15e+01  1.09e+01  5.31e-01  5.42e+01    5.62e+00      0              
      11  6.31e+01  1.25e+01  5.47e-01  4.70e+01    1.58e+00      0   Skip BFGS  
      12  4.95e+01  1.22e+01  5.71e-01  4.05e+01    2.02e+00      0   Skip BFGS  
      13  3.98e+01  1.17e+01  5.80e-01  3.48e+01    2.43e+00      0   Skip BFGS  
      14  3.30e+01  1.10e+01  5.74e-01  2.99e+01    2.65e+00      0              
      15  3.30e+01  1.03e+01  5.52e-01  2.85e+01    2.49e+00      0              
      16  3.30e+01  1.03e+01  5.08e-01  2.70e+01    3.10e+00      0              
      17  3.30e+01  1.03e+01  4.68e-01  2.58e+01    3.43e+00      0              
      18  3.30e+01  1.06e+01  4.37e-01  2.50e+01    3.28e+00      0              
      19  3.30e+01  1.09e+01  4.02e-01  2.42e+01    4.47e+00      0   Skip BFGS  
      20  2.72e+01  1.11e+01  3.63e-01  2.10e+01    7.53e+00      0   Skip BFGS  
      21  2.72e+01  1.03e+01  3.33e-01  1.94e+01    3.55e+00      0              
      22  2.72e+01  1.00e+01  2.92e-01  1.80e+01    4.06e+00      0              
      23  2.72e+01  9.79e+00  2.50e-01  1.66e+01    4.44e+00      0              
      24  2.72e+01  9.56e+00  2.13e-01  1.54e+01    4.95e+00      0              
      25  2.72e+01  9.38e+00  1.79e-01  1.43e+01    4.65e+00      0              
      26  2.72e+01  9.20e+00  1.57e-01  1.35e+01    4.45e+00      0   Skip BFGS  
      27  4.24e+01  8.99e+00  1.37e-01  1.48e+01    1.08e+01      0              
      28  4.24e+01  9.53e+00  1.13e-01  1.43e+01    6.85e+00      0              
      29  4.24e+01  9.62e+00  9.82e-02  1.38e+01    6.89e+00      0   Skip BFGS  
      30  4.24e+01  9.57e+00  8.54e-02  1.32e+01    7.89e+00      0              
      31  4.24e+01  9.12e+00  6.77e-02  1.20e+01    6.94e+00      0              
      32  6.71e+01  8.56e+00  5.48e-02  1.22e+01    1.18e+01      0              
      33  1.06e+02  8.64e+00  4.22e-02  1.31e+01    1.42e+01      0              
      34  1.06e+02  9.07e+00  3.21e-02  1.25e+01    1.02e+01      0              
      35  1.06e+02  9.22e+00  2.69e-02  1.21e+01    8.84e+00      0   Skip BFGS  
      36  1.06e+02  9.33e+00  2.28e-02  1.17e+01    8.56e+00      0   Skip BFGS  
      37  1.06e+02  9.41e+00  1.94e-02  1.15e+01    8.44e+00      0   Skip BFGS  
      38  1.06e+02  9.49e+00  1.67e-02  1.13e+01    8.41e+00      0   Skip BFGS  
      39  1.06e+02  9.53e+00  1.43e-02  1.11e+01    8.53e+00      0              
      40  1.06e+02  9.54e+00  1.24e-02  1.09e+01    8.94e+00      0              
      41  1.06e+02  9.48e+00  1.08e-02  1.06e+01    9.64e+00      0              
      42  1.06e+02  9.29e+00  9.28e-03  1.03e+01    1.00e+01      0              
      43  1.66e+02  8.84e+00  7.74e-03  1.01e+01    1.47e+01      0              
      44  2.64e+02  8.47e+00  5.57e-03  9.94e+00    1.35e+01      0              
      45  4.23e+02  8.30e+00  4.12e-03  1.00e+01    1.27e+01      0   Skip BFGS  
      46  6.78e+02  8.29e+00  3.20e-03  1.05e+01    1.32e+01      0              
      47  1.09e+03  8.32e+00  2.63e-03  1.12e+01    1.14e+01      0              
    Reach maximum number of IRLS cycles: 40
    ------------------------- STOP! -------------------------
    1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 1.3271e+02
    1 : |xc-x_last| = 3.1359e-02 <= tolX*(1+|x0|) = 1.0010e-01
    0 : |proj(x-g)-x|    = 1.1428e+01 <= tolG          = 1.0000e-01
    0 : |proj(x-g)-x|    = 1.1428e+01 <= 1e3*eps       = 1.0000e-02
    0 : maxIter   =     100    <= iter          =     48
    ------------------------- DONE! -------------------------




Plotting Results
----------------



.. code-block:: default


    fig, ax = plt.subplots(1, 2, figsize=(12 * 1.2, 4 * 1.2))

    # True versus recovered model
    ax[0].plot(mesh.vectorCCx, true_model, "k-")
    ax[0].plot(mesh.vectorCCx, inv_prob.l2model, "b-")
    ax[0].plot(mesh.vectorCCx, recovered_model, "r-")
    ax[0].legend(("True Model", "Recovered L2 Model", "Recovered Sparse Model"))
    ax[0].set_ylim([-2, 2])

    # Observed versus predicted data
    ax[1].plot(data_obj.dobs, "k-")
    ax[1].plot(inv_prob.dpred, "ko")
    ax[1].legend(("Observed Data", "Predicted Data"))

    # Plot convergence
    fig = plt.figure(figsize=(9, 5))
    ax = fig.add_axes([0.2, 0.1, 0.7, 0.85])
    ax.plot(saveDict.phi_d, "k", lw=2)

    twin = ax.twinx()
    twin.plot(saveDict.phi_m, "k--", lw=2)
    ax.plot(np.r_[IRLS.iterStart, IRLS.iterStart], np.r_[0, np.max(saveDict.phi_d)], "k:")
    ax.text(
        IRLS.iterStart,
        0.0,
        "IRLS Start",
        va="bottom",
        ha="center",
        rotation="vertical",
        size=12,
        bbox={"facecolor": "white"},
    )

    ax.set_ylabel("$\phi_d$", size=16, rotation=0)
    ax.set_xlabel("Iterations", size=14)
    twin.set_ylabel("$\phi_m$", size=16, rotation=0)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_003.png
          :alt: plot inv 2 inversion irls
          :class: sphx-glr-multi-img

    *

      .. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_004.png
          :alt: plot inv 2 inversion irls
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(847.4027777777777, 0.5, '$\\phi_m$')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  22.768 seconds)


.. _sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_2_inversion_irls.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_inv_2_inversion_irls.py <plot_inv_2_inversion_irls.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_inv_2_inversion_irls.ipynb <plot_inv_2_inversion_irls.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
