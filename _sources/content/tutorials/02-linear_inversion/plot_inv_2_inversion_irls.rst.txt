
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "content/tutorials/02-linear_inversion/plot_inv_2_inversion_irls.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_2_inversion_irls.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_content_tutorials_02-linear_inversion_plot_inv_2_inversion_irls.py:


Sparse Inversion with Iteratively Re-Weighted Least-Squares
===========================================================

Least-squares inversion produces smooth models which may not be an accurate
representation of the true model. Here we demonstrate the basics of inverting 
for sparse and/or blocky models. Here, we used the iteratively reweighted
least-squares approach. For this tutorial, we focus on the following:

    - Defining the forward problem
    - Defining the inverse problem (data misfit, regularization, optimization)
    - Defining the paramters for the IRLS algorithm
    - Specifying directives for the inversion
    - Recovering a set of model parameters which explains the observations

.. GENERATED FROM PYTHON SOURCE LINES 18-41

.. code-block:: default


    from __future__ import print_function

    import numpy as np
    import matplotlib.pyplot as plt

    from discretize import TensorMesh

    from SimPEG.simulation import LinearSimulation
    from SimPEG.data import Data
    from SimPEG import (
        simulation,
        maps,
        data_misfit,
        directives,
        optimization,
        regularization,
        inverse_problem,
        inversion,
    )

    # sphinx_gallery_thumbnail_number = 3








.. GENERATED FROM PYTHON SOURCE LINES 42-48

Defining the Model and Mapping
------------------------------

Here we generate a synthetic model and a mappig which goes from the model
space to the row space of our linear operator.


.. GENERATED FROM PYTHON SOURCE LINES 48-69

.. code-block:: default


    nParam = 100  # Number of model paramters

    # A 1D mesh is used to define the row-space of the linear operator.
    mesh = TensorMesh([nParam])

    # Creating the true model
    true_model = np.zeros(mesh.nC)
    true_model[mesh.vectorCCx > 0.3] = 1.0
    true_model[mesh.vectorCCx > 0.45] = -0.5
    true_model[mesh.vectorCCx > 0.6] = 0

    # Mapping from the model space to the row space of the linear operator
    model_map = maps.IdentityMap(mesh)

    # Plotting the true model
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    ax.plot(mesh.vectorCCx, true_model, "b-")
    ax.set_ylim([-2, 2])




.. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_001.png
    :alt: plot inv 2 inversion irls
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (-2.0, 2.0)



.. GENERATED FROM PYTHON SOURCE LINES 70-77

Defining the Linear Operator
----------------------------

Here we define the linear operator with dimensions (nData, nParam). In practive,
you may have a problem-specific linear operator which you would like to construct
or load here.


.. GENERATED FROM PYTHON SOURCE LINES 77-108

.. code-block:: default


    # Number of data observations (rows)
    nData = 20

    # Create the linear operator for the tutorial. The columns of the linear operator
    # represents a set of decaying and oscillating functions.
    jk = np.linspace(1.0, 60.0, nData)
    p = -0.25
    q = 0.25


    def g(k):
        return np.exp(p * jk[k] * mesh.vectorCCx) * np.cos(
            np.pi * q * jk[k] * mesh.vectorCCx
        )


    G = np.empty((nData, nParam))

    for i in range(nData):
        G[i, :] = g(i)

    # Plot the columns of G
    fig = plt.figure(figsize=(8, 5))
    ax = fig.add_subplot(111)
    for i in range(G.shape[0]):
        ax.plot(G[i, :])

    ax.set_title("Columns of matrix G")





.. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_002.png
    :alt: Columns of matrix G
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'Columns of matrix G')



.. GENERATED FROM PYTHON SOURCE LINES 109-115

Defining the Simulation
-----------------------

The simulation defines the relationship between the model parameters and
predicted data.


.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. code-block:: default


    sim = simulation.LinearSimulation(mesh, G=G, model_map=model_map)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/vsts/work/1/s/SimPEG/simulation.py:547: UserWarning:

    G has not been implemented for the simulation





.. GENERATED FROM PYTHON SOURCE LINES 120-126

Predict Synthetic Data
----------------------

Here, we use the true model to create synthetic data which we will subsequently
invert.


.. GENERATED FROM PYTHON SOURCE LINES 126-134

.. code-block:: default


    # Standard deviation of Gaussian noise being added
    std = 0.02
    np.random.seed(1)

    # Create a SimPEG data object
    data_obj = sim.make_synthetic_data(true_model, noise_floor=std, add_noise=True)








.. GENERATED FROM PYTHON SOURCE LINES 135-144

Define the Inverse Problem
--------------------------

The inverse problem is defined by 3 things:

    1) Data Misfit: a measure of how well our recovered model explains the field data
    2) Regularization: constraints placed on the recovered model and a priori information
    3) Optimization: the numerical approach used to solve the inverse problem


.. GENERATED FROM PYTHON SOURCE LINES 144-168

.. code-block:: default


    # Define the data misfit. Here the data misfit is the L2 norm of the weighted
    # residual between the observed data and the data predicted for a given model.
    # Within the data misfit, the residual between predicted and observed data are
    # normalized by the data's standard deviation.
    dmis = data_misfit.L2DataMisfit(simulation=sim, data=data_obj)

    # Define the regularization (model objective function). Here, 'p' defines the
    # the norm of the smallness term and 'q' defines the norm of the smoothness
    # term.
    reg = regularization.Sparse(mesh, mapping=model_map)
    reg.mref = np.zeros(nParam)
    p = 0.0
    q = 0.0
    reg.norms = np.c_[p, q]

    # Define how the optimization problem is solved.
    opt = optimization.ProjectedGNCG(
        maxIter=100, lower=-2.0, upper=2.0, maxIterLS=20, maxIterCG=30, tolCG=1e-4
    )

    # Here we define the inverse problem that is to be solved
    inv_prob = inverse_problem.BaseInvProblem(dmis, reg, opt)








.. GENERATED FROM PYTHON SOURCE LINES 169-176

Define Inversion Directives
---------------------------

Here we define any directiveas that are carried out during the inversion. This
includes the cooling schedule for the trade-off parameter (beta), stopping
criteria for the inversion and saving inversion results at each iteration.


.. GENERATED FROM PYTHON SOURCE LINES 176-197

.. code-block:: default


    # Add sensitivity weights but don't update at each beta
    sensitivity_weights = directives.UpdateSensitivityWeights(everyIter=False)

    # Reach target misfit for L2 solution, then use IRLS until model stops changing.
    IRLS = directives.Update_IRLS(max_irls_iterations=40, minGNiter=1, f_min_change=1e-4)

    # Defining a starting value for the trade-off parameter (beta) between the data
    # misfit and the regularization.
    starting_beta = directives.BetaEstimate_ByEig(beta0_ratio=1e0)

    # Update the preconditionner
    update_Jacobi = directives.UpdatePreconditioner()

    # Save output at each iteration
    saveDict = directives.SaveOutputEveryIteration(save_txt=False)

    # Define the directives as a list
    directives_list = [sensitivity_weights, IRLS, starting_beta, update_Jacobi, saveDict]









.. GENERATED FROM PYTHON SOURCE LINES 198-204

Setting a Starting Model and Running the Inversion
--------------------------------------------------

To define the inversion object, we need to define the inversion problem and
the set of directives. We can then run the inversion.


.. GENERATED FROM PYTHON SOURCE LINES 204-214

.. code-block:: default


    # Here we combine the inverse problem and the set of directives
    inv = inversion.BaseInversion(inv_prob, directives_list)

    # Starting model
    starting_model = 1e-4 * np.ones(nParam)

    # Run inversion
    recovered_model = inv.run(starting_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


            SimPEG.InvProblem is setting bfgsH0 to the inverse of the eval2Deriv.
            ***Done using same Solver and solverOpts as the problem***
    model has any nan: 0
    =============================== Projected GNCG ===============================
      #     beta     phi_d     phi_m       f      |proj(x-g)-x|  LS    Comment   
    -----------------------------------------------------------------------------
    x0 has any nan: 0
       0  1.66e+04  1.89e+03  5.02e-08  1.89e+03    1.99e+01      0              
       1  8.31e+03  9.49e+02  2.01e-02  1.12e+03    1.89e+01      0              
       2  4.16e+03  6.48e+02  4.62e-02  8.40e+02    1.82e+01      0   Skip BFGS  
       3  2.08e+03  3.80e+02  9.20e-02  5.72e+02    1.66e+01      0   Skip BFGS  
       4  1.04e+03  1.92e+02  1.56e-01  3.54e+02    1.44e+01      0   Skip BFGS  
       5  5.20e+02  8.63e+01  2.26e-01  2.04e+02    1.23e+01      0   Skip BFGS  
       6  2.60e+02  3.79e+01  2.90e-01  1.13e+02    9.81e+00      0   Skip BFGS  
       7  1.30e+02  1.91e+01  3.39e-01  6.32e+01    8.35e+00      0   Skip BFGS  
       8  6.50e+01  1.27e+01  3.73e-01  3.69e+01    6.76e+00      0   Skip BFGS  
       9  3.25e+01  1.05e+01  3.96e-01  2.33e+01    4.48e+00      0   Skip BFGS  
    Reached starting chifact with l2-norm regularization: Start IRLS steps...
    eps_p: 1.3415275666960003 eps_q: 1.3415275666960003
      10  1.62e+01  9.57e+00  5.86e-01  1.91e+01    1.97e+00      0   Skip BFGS  
      11  1.62e+01  9.51e+00  6.69e-01  2.04e+01    1.24e+00      0              
      12  1.62e+01  9.75e+00  7.20e-01  2.14e+01    1.17e+00      0              
      13  1.62e+01  9.99e+00  7.49e-01  2.22e+01    1.15e+00      0   Skip BFGS  
      14  1.62e+01  1.02e+01  7.54e-01  2.25e+01    1.12e+00      0              
      15  1.62e+01  1.05e+01  7.37e-01  2.24e+01    1.12e+00      0              
      16  1.62e+01  1.06e+01  7.00e-01  2.20e+01    1.19e+00      0              
      17  1.62e+01  1.07e+01  6.51e-01  2.13e+01    1.25e+00      0              
      18  1.62e+01  1.08e+01  6.05e-01  2.07e+01    1.39e+00      0              
      19  1.62e+01  1.09e+01  5.66e-01  2.01e+01    1.56e+00      0              
      20  1.34e+01  1.11e+01  5.27e-01  1.81e+01    1.64e+00      0              
      21  1.34e+01  1.09e+01  4.92e-01  1.75e+01    1.79e+00      0              
      22  1.34e+01  1.10e+01  4.40e-01  1.69e+01    2.13e+00      0              
      23  1.34e+01  1.10e+01  3.81e-01  1.61e+01    2.53e+00      0              
      24  1.34e+01  1.10e+01  3.23e-01  1.53e+01    2.14e+00      0              
      25  1.34e+01  1.09e+01  2.78e-01  1.47e+01    1.95e+00      0   Skip BFGS  
      26  1.34e+01  1.09e+01  2.38e-01  1.41e+01    2.00e+00      0              
      27  1.34e+01  1.08e+01  2.02e-01  1.35e+01    2.52e+00      0              
      28  1.34e+01  1.07e+01  1.67e-01  1.29e+01    2.88e+00      0              
      29  1.34e+01  1.06e+01  1.35e-01  1.24e+01    2.63e+00      0              
      30  1.34e+01  1.05e+01  1.10e-01  1.20e+01    2.03e+00      0              
      31  1.34e+01  1.05e+01  9.04e-02  1.17e+01    2.55e+00      0              
      32  1.34e+01  1.05e+01  7.49e-02  1.15e+01    1.67e+00      0              
      33  1.34e+01  1.04e+01  6.39e-02  1.13e+01    1.70e+00      0   Skip BFGS  
      34  1.34e+01  1.04e+01  5.52e-02  1.12e+01    1.82e+00      0              
      35  1.34e+01  1.04e+01  4.80e-02  1.11e+01    1.96e+00      0              
      36  1.34e+01  1.04e+01  4.21e-02  1.10e+01    1.79e+00      0              
      37  1.34e+01  1.04e+01  3.79e-02  1.09e+01    1.91e+00      0   Skip BFGS  
      38  1.34e+01  1.04e+01  3.42e-02  1.08e+01    2.08e+00      0              
      39  1.34e+01  1.04e+01  3.10e-02  1.08e+01    2.28e+00      0              
      40  1.34e+01  1.03e+01  2.80e-02  1.07e+01    2.54e+00      0              
      41  1.34e+01  1.03e+01  2.50e-02  1.07e+01    2.92e+00      0              
      42  1.34e+01  1.03e+01  2.19e-02  1.06e+01    3.53e+00      0              
      43  1.34e+01  1.03e+01  1.89e-02  1.05e+01    3.94e+00      0              
      44  1.34e+01  1.03e+01  1.59e-02  1.05e+01    4.24e+00      0              
      45  1.34e+01  1.03e+01  1.34e-02  1.04e+01    3.74e+00      0              
      46  1.34e+01  1.02e+01  1.16e-02  1.04e+01    2.98e+00      0   Skip BFGS  
      47  1.34e+01  1.02e+01  1.02e-02  1.04e+01    3.17e+00      0              
      48  1.34e+01  1.02e+01  9.00e-03  1.04e+01    4.01e+00      0              
      49  1.34e+01  1.02e+01  7.88e-03  1.03e+01    3.68e+00      0              
    Reach maximum number of IRLS cycles: 40
    ------------------------- STOP! -------------------------
    1 : |fc-fOld| = 0.0000e+00 <= tolF*(1+|f0|) = 1.8929e+02
    0 : |xc-x_last| = 4.8227e-01 <= tolX*(1+|x0|) = 1.0010e-01
    0 : |proj(x-g)-x|    = 3.6812e+00 <= tolG          = 1.0000e-01
    0 : |proj(x-g)-x|    = 3.6812e+00 <= 1e3*eps       = 1.0000e-02
    0 : maxIter   =     100    <= iter          =     50
    ------------------------- DONE! -------------------------




.. GENERATED FROM PYTHON SOURCE LINES 215-218

Plotting Results
----------------


.. GENERATED FROM PYTHON SOURCE LINES 218-255

.. code-block:: default


    fig, ax = plt.subplots(1, 2, figsize=(12 * 1.2, 4 * 1.2))

    # True versus recovered model
    ax[0].plot(mesh.vectorCCx, true_model, "k-")
    ax[0].plot(mesh.vectorCCx, inv_prob.l2model, "b-")
    ax[0].plot(mesh.vectorCCx, recovered_model, "r-")
    ax[0].legend(("True Model", "Recovered L2 Model", "Recovered Sparse Model"))
    ax[0].set_ylim([-2, 2])

    # Observed versus predicted data
    ax[1].plot(data_obj.dobs, "k-")
    ax[1].plot(inv_prob.dpred, "ko")
    ax[1].legend(("Observed Data", "Predicted Data"))

    # Plot convergence
    fig = plt.figure(figsize=(9, 5))
    ax = fig.add_axes([0.2, 0.1, 0.7, 0.85])
    ax.plot(saveDict.phi_d, "k", lw=2)

    twin = ax.twinx()
    twin.plot(saveDict.phi_m, "k--", lw=2)
    ax.plot(np.r_[IRLS.iterStart, IRLS.iterStart], np.r_[0, np.max(saveDict.phi_d)], "k:")
    ax.text(
        IRLS.iterStart,
        0.0,
        "IRLS Start",
        va="bottom",
        ha="center",
        rotation="vertical",
        size=12,
        bbox={"facecolor": "white"},
    )

    ax.set_ylabel("$\phi_d$", size=16, rotation=0)
    ax.set_xlabel("Iterations", size=14)
    twin.set_ylabel("$\phi_m$", size=16, rotation=0)



.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_003.png
          :alt: plot inv 2 inversion irls
          :class: sphx-glr-multi-img

    *

      .. image:: /content/tutorials/02-linear_inversion/images/sphx_glr_plot_inv_2_inversion_irls_004.png
          :alt: plot inv 2 inversion irls
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(847.4027777777777, 0.5, '$\\phi_m$')




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  53.590 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_content_tutorials_02-linear_inversion_plot_inv_2_inversion_irls.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_inv_2_inversion_irls.py <plot_inv_2_inversion_irls.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_inv_2_inversion_irls.ipynb <plot_inv_2_inversion_irls.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
